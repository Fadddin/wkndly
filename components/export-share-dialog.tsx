"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Share2, Download, Copy, Check } from "lucide-react"
import { useWeekend } from "@/lib/weekend-context"
import { getWeekendDays } from "@/lib/weekend-data"

interface ExportShareDialogProps {
  children: React.ReactNode
}

export function ExportShareDialog({ children }: ExportShareDialogProps) {
  const { state } = useWeekend()
  const { scheduledActivities, userName, selectedTheme, isLongWeekend } = state
  const [open, setOpen] = useState(false)
  const [copied, setCopied] = useState(false)

  const weekendDays = getWeekendDays(isLongWeekend)

  const generateScheduleText = () => {
    const header = `${userName ? `${userName}'s ` : ""}Weekend Plan\n${"=".repeat(30)}\n\n`

    let scheduleText = header

    weekendDays.forEach((day) => {
      const dayActivities = scheduledActivities
        .filter((sa) => sa.day === day.key)
        .sort((a, b) => a.timeSlot.localeCompare(b.timeSlot))

      if (dayActivities.length > 0) {
        scheduleText += `${day.name}\n${"-".repeat(day.name.length)}\n`
        dayActivities.forEach((sa) => {
          scheduleText += `${sa.timeSlot} - ${sa.activity.name} (${sa.activity.duration})\n`
        })
        scheduleText += "\n"
      }
    })

    if (scheduledActivities.length === 0) {
      scheduleText += "No activities scheduled yet.\n"
    }

    scheduleText += `\nGenerated by Weekendly - Your Weekend Planner`

    return scheduleText
  }

  const handleCopyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generateScheduleText())
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error("Failed to copy text: ", err)
    }
  }

  const handleDownloadPDF = () => {
    // Create a simple text file for now (PDF generation would require additional libraries)
    const text = generateScheduleText()
    const blob = new Blob([text], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${userName ? `${userName}-` : ""}weekend-plan.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleShare = async () => {
    const text = generateScheduleText()

    if (navigator.share) {
      try {
        await navigator.share({
          title: `${userName ? `${userName}'s ` : ""}Weekend Plan`,
          text: text,
        })
      } catch (err) {
        console.error("Error sharing:", err)
        handleCopyToClipboard()
      }
    } else {
      handleCopyToClipboard()
    }
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Share2 className="w-5 h-5" />
            Share & Export
          </DialogTitle>
          <DialogDescription>Share your weekend plan or export it for later</DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {/* Preview */}
          <div className="bg-muted/50 p-4 rounded-lg max-h-48 overflow-y-auto">
            <pre className="text-sm whitespace-pre-wrap font-mono">{generateScheduleText()}</pre>
          </div>

          {/* Action Buttons */}
          <div className="grid grid-cols-2 gap-2">
            <Button onClick={handleShare} className="w-full">
              <Share2 className="w-4 h-4 mr-2" />
              Share
            </Button>

            <Button onClick={handleDownloadPDF} variant="outline" className="w-full bg-transparent">
              <Download className="w-4 h-4 mr-2" />
              Download
            </Button>
          </div>

          <Button onClick={handleCopyToClipboard} variant="outline" className="w-full bg-transparent" disabled={copied}>
            {copied ? (
              <>
                <Check className="w-4 h-4 mr-2" />
                Copied!
              </>
            ) : (
              <>
                <Copy className="w-4 h-4 mr-2" />
                Copy to Clipboard
              </>
            )}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  )
}
